variables:
  NODE_IMAGE: "node:22-alpine" # Updated Node.js image
  ARTIFACT_PATH: "dist.zip"    # Artifact is now a zip file

stages:
  - install
  - build
  - deploy

install-dependencies:
  image: $NODE_IMAGE
  stage: install
  cache:
    key: "node-$CI_COMMIT_REF_SLUG"
    paths:
      - node_modules/
  script:
    - npm i # Install dependencies using clean install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

build:
  image: $NODE_IMAGE
  stage: build
  dependencies:
    - install-dependencies
  before_script:
    - apk add zip # Add zip utility for compressing the build
  script:
    - npm run build -- --mode production # Run the build script from package.json
    - zip -r $ARTIFACT_PATH dist deployment # Compress the build output into a zip file
  artifacts:
    name: "Build artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 2 hours
    paths:
      - $ARTIFACT_PATH

deploy:
  stage: deploy
  image: alpine
  only:
    refs:
      - main
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ARTIFACT_NAME=$(basename $ARTIFACT_PATH)
    - scp -o StrictHostKeyChecking=no $ARTIFACT_PATH $SSH_USER_HOST:/tmp/$ARTIFACT_NAME
    - ssh -o StrictHostKeyChecking=no $SSH_USER_HOST "sudo mkdir -p $PROJECT_FOLDER; sudo chown -R www-data:www-data $PROJECT_FOLDER"
    - ssh -o StrictHostKeyChecking=no $SSH_USER_HOST "sudo mv /tmp/$ARTIFACT_NAME $PROJECT_FOLDER; cd $PROJECT_FOLDER; sudo rm -rf dist; sudo rm -rf deployment; sudo unzip $ARTIFACT_NAME"
    - ssh -o StrictHostKeyChecking=no $SSH_USER_HOST "cd $PROJECT_FOLDER; sudo rm -rf $ARTIFACT_NAME" # Remove the zip file after extraction