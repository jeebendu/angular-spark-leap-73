import http from "@/lib/JwtInterceptor";
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

// Base API configuration
const API_BASE_URL = 'https://api.example.com'; // Replace with your actual API base URL

// Create a class to manage API requests with interceptors
class ApiService {
  private client: axios;

  constructor() {
    this.client = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'Content-Type': 'application/json',
      }
    });

    // Request interceptor to add JWT token to headers
    this.client.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('auth_token');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => {
        return Promise.reject(error);
      }
    );

    // Response interceptor to handle common response patterns
    this.client.interceptors.response.use(
      (response) => response,
      (error) => {
        // Handle 401 Unauthorized errors (token expired, etc.)
        if (error.response && error.response.status === 401) {
          // Clear stored token
          localStorage.removeItem('auth_token');
          // Could also redirect to login page or show login modal
          console.log('Unauthorized: Please log in again');
        }
        return Promise.reject(error);
      }
    );
  }

  // Generic methods for different HTTP verbs
  async get<T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {
    return this.client.get<T>(url, config);
  }

  async post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {
    return this.client.post<T>(url, data, config);
  }

  async put<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {
    return this.client.put<T>(url, data, config);
  }

  async delete<T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {
    return this.client.delete<T>(url, config);
  }
}

// Create and export a singleton instance
const apiService = new ApiService();
export default apiService;
